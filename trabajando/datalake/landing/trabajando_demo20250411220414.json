{"origin": "wired", "title": "Undergraduate Disproves 40-Year-Old Conjecture, Invents New Kind of Hash Table", "link": "https://www.wired.com/story/undergraduate-upends-a-40-year-old-data-science-conjecture/", "image": "https://media.wired.com/photos/67d1a33f957eeb91ce82a5c6/3:2/w_1600%2Cc_limit/Hash-Tables-Redux_cr_Nash-Weerasekera-Lede.jpeg", "resume": "A young computer scientist and two colleagues show that searches within data structures called hash tables can be much faster than previously deemed possible.", "date_published": "2025-03-16T07:00:00-04:00", "author": "Steve Nadis", "segments": [" ", " ", "Sometime in the fall of 2021, Andrew Krapivin, an undergraduate at Rutgers University, encountered a paper that would change his life. At the time, Krapivin didn\u2019t give it much thought. But two years later, when he finally set aside time to go through the paper (\u201cjust for fun,\u201d as he put it), his efforts would lead to a rethinking of a widely used tool in computer science.", "The paper\u2019s title, \u201c", ",\u201d referred to arrowlike entities that can direct you to a piece of information, or element, in a computer\u2019s memory. Krapivin soon came up with a potential way to further miniaturize the pointers so they consumed less memory. However, to achieve that, he needed a better way of organizing the data that the pointers would point to.", "He turned to a common approach for storing data known as a hash table. But in the midst of his tinkering, Krapivin realized that he had invented a new kind of hash table, one that worked faster than expected\u2014taking less time and fewer steps to find specific elements.", ", a coauthor of the \u201cTiny Pointers\u201d paper and Krapivin\u2019s former professor at Rutgers, was initially skeptical of Krapivin\u2019s new design. Hash tables are among the most thoroughly studied data structures in all of computer science; the advance sounded too good to be true. But just to be sure, he asked a frequent collaborator (and a \u201cTiny Pointers\u201d coauthor), ", " of Carnegie Mellon University, to check out his student\u2019s invention. Kuszmaul had a different reaction. \u201cYou didn\u2019t just come up with a cool hash table,\u201d he remembers telling Krapivin. \u201cYou\u2019ve actually completely wiped out a 40-year-old conjecture!\u201d", "Without setting out to do so, Andrew Krapivin upended the common thinking around hash tables\u2014one of the best-studied tools in computer science.", "Together, Krapivin (now a graduate student at the University of Cambridge), Farach-Colton (now at New York University), and Kuszmaul demonstrated in a ", " that this new hash table can indeed find elements faster than was considered possible. ln so doing, they had disproved a conjecture long held to be true.", "\u201cIt\u2019s an important paper,\u201d said ", " of Cornell Tech in New York City. \u201cHash tables are among the oldest data structures we have. And they\u2019re still one of the most efficient ways to store data.\u201d Yet open questions remain about how they work, he said. \u201cThis paper answers a couple of them in surprising ways.\u201d", "Hash tables have become ubiquitous in computing, partly because of their simplicity and ease of use. They\u2019re designed to allow users to do exactly three things: \u201cquery\u201d (search for) an element, delete an element, or insert one into an empty slot. The first hash tables date back to the early 1950s, and computer scientists have studied and used them ever since. Among other things, researchers wanted to figure out the speed limits for some of these operations. How fast, for example, could a new search or insertion possibly be?", "Mart\u00edn Farach-Colton helped Krapivin prove that his new hash table contradicted a long-standing conjecture.", "The answer generally depends on the amount of time it takes to find an empty spot in a hash table. This, in turn, typically depends on how full the hash table is. Fullness can be described in terms of an overall percentage\u2014this table is 50 percent full, that one\u2019s 90 percent\u2014but researchers often deal with much fuller tables. So instead, they may use a whole number, denoted by ", ", to specify how close the hash table is to 100 percent full. If ", " is 100, then the table is 99 percent full. If ", " is 1,000, the table is 99.9 percent full. This measure of fullness offers a convenient way to evaluate how long it should take to perform actions like queries or insertions.", "Researchers have long known that for certain common hash tables, the expected time required to make the worst possible insertion\u2014putting an item into, say, the last remaining open spot\u2014is proportional to ", ". \u201cIf your hash table is 99 percent full,\u201d Kuszmaul said, \u201cit makes sense that you would have to look at around 100 different positions to find a free slot.\u201d", "In a ", ", the computer scientist ", ", who would go on to win the A.M. Turing Award, asserted that among hash tables with a specific set of properties, the best way to find an individual element or an empty spot is to just go through potential spots randomly\u2014an approach known as uniform probing. He also stated that, in the worst-case scenario, where you\u2019re searching for the last remaining open spot, you can never do better than ", ". For 40 years, most computer scientists assumed that Yao\u2019s conjecture was true.", "Krapivin was not held back by the conventional wisdom for the simple reason that he was unaware of it. \u201cI did this without knowing about Yao\u2019s conjecture,\u201d he said. His explorations with tiny pointers led to a new kind of hash table\u2014one that did not rely on uniform probing. And for this new hash table, the time required for worst-case queries and insertions is proportional to (log ", ")", "\u2014far faster than ", ". This result directly contradicted Yao\u2019s conjecture. Farach-Colton and Kuszmaul helped Krapivin show that (log ", ")", " is the optimal, unbeatable bound for the popular class of hash tables Yao had written about.", "\u201cThis result is beautiful in that it addresses and solves such a classic problem,\u201d said ", " of Carnegie Mellon.", "\u201cIt\u2019s not just that they disproved [Yao\u2019s conjecture], they also found the best possible answer to his question,\u201d said ", " of the University of Waterloo. \u201cWe could have gone another 40 years before we knew the right answer.\u201d", "Krapivin on the King\u2019s College Bridge at the University of Cambridge. His new hash table can find and store data faster than researchers ever thought possible.", "In addition to refuting Yao\u2019s conjecture, the new paper also contains what many consider an even more astonishing result. It pertains to a related, though slightly different, situation: In 1985, Yao looked not only at the worst-case times for queries, but also at the average time taken across all possible queries. He proved that hash tables with certain properties\u2014including those that are labeled \u201cgreedy,\u201d which means that new elements must be placed in the first available spot\u2014could never achieve an average time better than log ", ".", "Farach-Colton, Krapivin, and Kuszmaul wanted to see if that same limit also applied to non-greedy hash tables. They showed that it did not by providing a counterexample, a non-greedy hash table with an average query time that\u2019s much, much better than log ", ". In fact, it doesn\u2019t depend on ", " at all. \u201cYou get a number,\u201d Farach-Colton said, \u201csomething that is just a constant and doesn\u2019t depend on how full the hash table is.\u201d The fact that you can achieve a constant average query time, regardless of the hash table\u2019s fullness, was wholly unexpected\u2014even to the authors themselves.", "The team\u2019s results may not lead to any immediate applications, but that\u2019s not all that matters, Conway said. \u201cIt\u2019s important to understand these kinds of data structures better. You don\u2019t know when a result like this will unlock something that lets you do better in practice.\u201d", " ", " ", " "]}